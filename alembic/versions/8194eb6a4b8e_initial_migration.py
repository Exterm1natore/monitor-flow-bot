"""Initial migration

Revision ID: 8194eb6a4b8e
Revises: 
Create Date: 2025-05-03 20:47:01.460557

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '8194eb6a4b8e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chat_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('type')
    )
    op.create_table('notification_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('type')
    )
    op.create_table('chats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('chat_type', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['chat_type'], ['chat_types.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('chat_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['chat_id'], ['chats.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('chat_id')
    )
    op.create_table('notification_subscribers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('chat_id', sa.Integer(), nullable=False),
    sa.Column('notification_type', sa.Integer(), nullable=False),
    sa.Column('granted_by', sa.String(), nullable=False),
    sa.Column('granted_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['chat_id'], ['chats.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['notification_type'], ['notification_types.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('chat_id', 'notification_type', name='uix_chat_notification_type')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('chat_id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['chat_id'], ['chats.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('chat_id')
    )
    op.create_table('administrators',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('granted_by', sa.String(), nullable=False),
    sa.Column('granted_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )

    # Вставка значений в chat_types
    op.execute("""
                    INSERT INTO chat_types (id, type) VALUES
                    (1, 'private'),
                    (2, 'group'),
                    (3, 'channel');
                """)

    # Вставка значений в notification_types
    op.execute("""
                    INSERT INTO notification_types (id, type, description) VALUES
                    (1, 'system', 'Системные сообщения приложения'),
                    (2, 'zabbix', 'Уведомления о компьютерных инцидентах системы мониторинга zabbix')
        """)

    # Триггеры для users
    op.execute("""
                    CREATE TRIGGER trg_users_insert_check_chat_type
                    BEFORE INSERT ON users
                    FOR EACH ROW
                    BEGIN
                        -- Check: the chat type must be 'private'
                        SELECT RAISE(ABORT, 'Users.chat_id must refer to a chat with type private')
                        WHERE NOT EXISTS (
                            SELECT 1
                            FROM chats c
                            JOIN chat_types ct ON c.chat_type = ct.id
                            WHERE c.id = NEW.chat_id AND ct.type = 'private'
                        );
                    END;
                """)

    op.execute("""
                    CREATE TRIGGER trg_users_update_check_chat_type
                    BEFORE UPDATE OF chat_id ON users
                    FOR EACH ROW
                    BEGIN
                        -- Check: the chat type must be 'private'
                        SELECT RAISE(ABORT, 'Users.chat_id must refer to a chat with type private')
                        WHERE NOT EXISTS (
                            SELECT 1
                            FROM chats c
                            JOIN chat_types ct ON c.chat_type = ct.id
                            WHERE c.id = NEW.chat_id AND ct.type = 'private'
                        );
                    END;
                """)

    op.execute("""
                CREATE TRIGGER check_unique_chat_id_on_users_insert
                BEFORE INSERT ON users
                FOR EACH ROW
                BEGIN
                    -- Check: if chat_id is already in groups, abort.
                    SELECT RAISE(ABORT, 'chat_id is already used in the groups table')
                    WHERE EXISTS (
                        SELECT 1 FROM groups WHERE chat_id = NEW.chat_id
                    );
                END;
            """)

    op.execute("""
                CREATE TRIGGER check_unique_chat_id_on_users_update
                BEFORE UPDATE OF chat_id ON users
                FOR EACH ROW
                BEGIN
                    -- Check: if chat_id is already in groups, abort.
                    SELECT RAISE(ABORT, 'chat_id is already used in the groups table')
                    WHERE EXISTS (
                        SELECT 1 FROM groups WHERE chat_id = NEW.chat_id
                    );
                END;
            """)

    # Триггеры для groups
    op.execute("""
                    CREATE TRIGGER trg_groups_insert_check_chat_type
                    BEFORE INSERT ON groups
                    FOR EACH ROW
                    BEGIN
                        -- Check: the chat type must be 'group' or 'channel'
                        SELECT RAISE(ABORT, 'Groups.chat_id must refer to a chat with type group or channel')
                        WHERE NOT EXISTS (
                            SELECT 1
                            FROM chats c
                            JOIN chat_types ct ON c.chat_type = ct.id
                            WHERE c.id = NEW.chat_id AND ct.type IN ('group', 'channel')
                        );
                    END;
                """)

    op.execute("""
                    CREATE TRIGGER trg_groups_update_check_chat_type
                    BEFORE UPDATE OF chat_id ON groups
                    FOR EACH ROW
                    BEGIN
                        -- Check: the chat type must be 'group' or 'channel'
                        SELECT RAISE(ABORT, 'Groups.chat_id must refer to a chat with type group or channel')
                        WHERE NOT EXISTS (
                            SELECT 1
                            FROM chats c
                            JOIN chat_types ct ON c.chat_type = ct.id
                            WHERE c.id = NEW.chat_id AND ct.type IN ('group', 'channel')
                        );
                    END;
                """)

    op.execute("""
                CREATE TRIGGER check_unique_chat_id_on_groups_insert
                BEFORE INSERT ON groups
                FOR EACH ROW
                BEGIN
                    -- Check: if chat_id is already in users, abort.
                    SELECT RAISE(ABORT, 'chat_id is already used in the users table')
                    WHERE EXISTS (
                        SELECT 1 FROM users WHERE chat_id = NEW.chat_id
                    );
                END;
            """)

    op.execute("""
                CREATE TRIGGER check_unique_chat_id_on_groups_update
                BEFORE UPDATE OF chat_id ON groups
                FOR EACH ROW
                BEGIN
                    -- Check: if chat_id is already in users, abort.
                    SELECT RAISE(ABORT, 'chat_id is already used in the users table')
                    WHERE EXISTS (
                        SELECT 1 FROM users WHERE chat_id = NEW.chat_id
                    );
                END;
            """)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Удаление всех триггеров
    op.execute("DROP TRIGGER IF EXISTS trg_users_insert_check_chat_type;")
    op.execute("DROP TRIGGER IF EXISTS trg_users_update_check_chat_type;")

    op.execute("DROP TRIGGER IF EXISTS check_unique_chat_id_on_users_insert;")
    op.execute("DROP TRIGGER IF EXISTS check_unique_chat_id_on_groups_update;")

    op.execute("DROP TRIGGER IF EXISTS trg_groups_insert_check_chat_type;")
    op.execute("DROP TRIGGER IF EXISTS trg_groups_update_check_chat_type;")

    op.execute("DROP TRIGGER IF EXISTS check_unique_chat_id_on_groups_insert;")
    op.execute("DROP TRIGGER IF EXISTS check_unique_chat_id_on_groups_update;")

    op.drop_table('administrators')
    op.drop_table('users')
    op.drop_table('notification_subscribers')
    op.drop_table('groups')
    op.drop_table('chats')
    op.drop_table('notification_types')
    op.drop_table('chat_types')
    # ### end Alembic commands ###
