from typing import Dict, Any
import html
from bot.bot import Bot, Event
from bot.constant import ChatType
from app.utils import text_format
from app.core import bot_extensions
from app import db
from . import users, groups
from .helpers import (
    send_not_found_chat, send_notification_types, send_notification_types_access,
    send_notification_description, catch_and_log_exceptions, send_invalid_command_format
)
from .constants import (
    Commands, INFO_REQUEST_MESSAGE, NOTIFY_ON_REFERENCE, NOTIFY_OFF_REFERENCE,
    HELP_BASE_MESSAGE
)


@catch_and_log_exceptions
def start_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É start.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    output_text = ("<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n"
                   "–ú–æ–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ–π —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–∞—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤, "
                   "–ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"
                   f"{INFO_REQUEST_MESSAGE}")

    bot_extensions.send_text_or_raise(
        bot, event.from_chat, output_text, parse_mode='HTML'
    )

    # –ò—â–µ–º —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

    # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
    if chat is None:
        send_not_found_chat(bot, event.from_chat, event.chat_type)


def help_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É help.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    # –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    output_text = (f"{HELP_BASE_MESSAGE}\n\n"
                   "<b>--- –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n\n")

    output_text += (
        f"üîπ <i>/{Commands.HELP.value}</i> - —Å–ø—Ä–∞–≤–∫–∞ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥;\n"
        f"üîπ <i>/{Commands.REGISTER.value}</i> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞;\n"
        f"üîπ <i>/{Commands.SIGN_OUT.value}</i> - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏;\n"
        f"üîπ <i>/{Commands.STATUS.value}</i> - –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö;\n"
        f"üîπ <i>/{Commands.START.value}</i> - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ;\n"
        f"üîπ <i>/{Commands.NOTIFY_ON.value}</i> - –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –±–æ—Ç–æ–º);\n"
        f"üîπ <i>/{Commands.NOTIFY_OFF.value}</i> - –æ—Ç–ø–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –±–æ—Ç–æ–º)."
    )

    # –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
    if event.chat_type == ChatType.PRIVATE.value:
        users.send_help_user(bot, event, output_text)
    else:
        groups.send_help_group(bot, event, output_text)


@catch_and_log_exceptions
def status_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É status.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
    payload: Dict[str, Any] = {}
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)
        if chat is None:
            send_not_found_chat(bot, event.from_chat, event.chat_type)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≥—Ä—É–ø–ø–∞, –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if chat.user is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            first_name = event.data['from']['firstName']
            last_name = event.data['from'].get('lastName') or None
            db.crud.update_user(session, chat.user, first_name, last_name)

            payload.update({
                'title': '–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                'email': chat.email,
                'name_label': '–ò–º—è',
                'name': chat.user.first_name,
                'surname_label': '–§–∞–º–∏–ª–∏—è',
                'surname': chat.user.last_name,
                'role': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if chat.user.administrator else None
            })
        elif chat.group is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            title = event.data['chat']['title']
            db.crud.update_group(session, chat.group, title)

            payload.update({
                'title': '–°—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã',
                'name_label': '–ù–∞–∑–≤–∞–Ω–∏–µ',
                'name': chat.group.title,
                'role': None
            })
        else:
            send_not_found_chat(bot, event.from_chat, event.chat_type)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        payload['subscriptions'] = [
            sub.notification_type_model.type
            for sub in chat.notification_subscribers
        ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    lines = [f"üìç <b>{payload['title']}</b>\n"]

    if 'email' in payload:
        lines.append(f"\nüîπ email: <i>{html.escape(payload['email'])}</i>")

    lines.append(f"\nüîπ {payload['name_label']}: <i>{html.escape(payload['name'])}</i>")

    if payload.get('surname_label'):
        surname = payload.get('surname') or ''
        lines.append(f"\nüîπ {payload['surname_label']}: <i>{html.escape(surname)}</i>")

    if payload.get('role'):
        lines.append(f"\nüîπ –†–æ–ª—å: <i>{html.escape(payload['role'])}</i>")

    lines.append("\nüîπ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ")
    if not payload['subscriptions']:
        lines.append("‚ùå")
    else:
        subs = ", ".join(payload['subscriptions'])
        lines.append(f"[{html.escape(subs)}]")

    output_text = ''.join(lines)

    bot_extensions.send_long_text(
        bot, event.from_chat, output_text, parse_mode='HTML'
    )


def register_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É register.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    # –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
    if event.chat_type == ChatType.PRIVATE.value:
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users.register_user(bot, event)
    else:
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
        groups.register_group(bot, event)


def sign_out_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É sign_out.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    # –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
    if event.chat_type == ChatType.PRIVATE.value:
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users.delete_user_registration(bot, event)
    else:
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
        groups.delete_group_registration(bot, event)


@catch_and_log_exceptions
def notify_on_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É notify_on.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    text_items = text_format.normalize_whitespace(event.text).split()
    if not text_items:
        output_text = "‚õîÔ∏è <b>–ö–æ–º–∞–Ω–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.</b>"
        bot_extensions.send_text_or_raise(
            bot, event.from_chat, output_text, reply_msg_id=event.msgId, parse_mode='HTML'
        )
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
    if len(text_items) == 1:
        bot_extensions.send_text_or_raise(
            bot, event.from_chat, text=NOTIFY_ON_REFERENCE, parse_mode='HTML'
        )
        return

    # –ï—Å–ª–∏ 1 –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
    if len(text_items) == 2:
        if text_items[1] == '-list':
            send_notification_types(bot, event.from_chat)
            return
        elif text_items[1] == '-access':
            send_notification_types_access(bot, event.from_chat, True)
            return
        else:
            # –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
            if event.chat_type == ChatType.PRIVATE.value:
                users.user_subscribe_notifications(bot, event, text_items[1])
            else:
                groups.group_subscribe_notifications(bot, event, text_items[1])
            return

    # –ï—Å–ª–∏ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    if len(text_items) == 3 and text_items[2] == '-desc':
        send_notification_description(bot, event.from_chat, text_items[1])
        return

    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤—ã–≤–æ–¥–∏–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–µ–≤–µ—Ä–Ω—ã–π
    send_invalid_command_format(bot, event.from_chat, Commands.NOTIFY_ON.value, event.msgId)


@catch_and_log_exceptions
def notify_off_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É notify_off.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    text_items = text_format.normalize_whitespace(event.text).split()
    if not text_items:
        output_text = "‚õîÔ∏è <b>–ö–æ–º–∞–Ω–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.</b>"
        bot_extensions.send_text_or_raise(
            bot, event.from_chat, output_text, reply_msg_id=event.msgId, parse_mode='HTML'
        )
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
    if len(text_items) == 1:
        bot_extensions.send_text_or_raise(
            bot, event.from_chat, text=NOTIFY_OFF_REFERENCE, parse_mode='HTML'
        )
        return

    # –ï—Å–ª–∏ 1 –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
    if len(text_items) == 2:
        if text_items[1] == '-list':
            send_notification_types(bot, event.from_chat)
            return
        elif text_items[1] == '-access':
            send_notification_types_access(bot, event.from_chat, False)
            return
        else:
            # –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
            if event.chat_type == ChatType.PRIVATE.value:
                users.user_unsubscribe_notifications(bot, event, text_items[1])
            else:
                groups.group_unsubscribe_notifications(bot, event, text_items[1])
            return

    # –ï—Å–ª–∏ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    if len(text_items) == 3 and text_items[2] == '-desc':
        send_notification_description(bot, event.from_chat, text_items[1])
        return

    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤—ã–≤–æ–¥–∏–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–µ–≤–µ—Ä–Ω—ã–π
    send_invalid_command_format(bot, event.from_chat, Commands.NOTIFY_OFF.value, event.msgId)


@catch_and_log_exceptions
def unprocessed_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –±–æ—Ç–µ.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    output_text = ("üçÉ <i>–®–µ–ª–µ—Å—Ç –ª–∏—Å—Ç—å–µ–≤</i> üçÉ\n\n"
                   "–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å\n\n"
                   f"{INFO_REQUEST_MESSAGE}")

    bot_extensions.send_text_or_raise(
        bot, event.from_chat, output_text, reply_msg_id=event.msgId, parse_mode='HTML'
    )
