from typing import Dict, Any
import html
from bot.bot import Bot, Event
from bot.constant import ChatType
from app.utils import text_format
from app import db
from .constants import (
    Commands, INFO_REQUEST_MESSAGE
)


def start_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É start.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    output_text = ("<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                   "–ú–æ–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ–π —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–∞—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤, "
                   "–ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"
                   f"{INFO_REQUEST_MESSAGE}")

    bot.send_text(event.from_chat, output_text, parse_mode='HTML')

    # –ò—â–µ–º —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

    # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
    if chat is None:
        send_not_found_chat(bot, event.from_chat, event.chat_type)


def help_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É help.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    output_text = "–≠—Ç–æ—Ç –±–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ —Å–æ–±—ã—Ç–∏—è—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤, –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"

    # –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
    if event.chat_type == ChatType.PRIVATE.value:
        output_text += "<b>--- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"

        output_text += (f"üîπ <i>/{Commands.HELP.value}</i> - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥;\n"
                        f"üîπ <i>/{Commands.MAN.value}</i> - –ø–æ–ª—É—á–∏—Ç—å –º–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π;\n"
                        f"üîπ <i>/{Commands.STATUS.value}</i> - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–µ —Å —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞;\n"
                        f"üîπ <i>/{Commands.STOP.value}</i> - —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è;\n"
                        f"üîπ <i>/{Commands.START.value}</i> - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –±—ã–ª–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ).")

        with db.get_db_session() as session:
            user = db.crud.find_user_by_chat(session, db.crud.find_chat(session, event.from_chat))
            is_admin = db.crud.is_user_administrator(session, user) if user is not None else False

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if is_admin:
            output_text += "\n\n<b>--- –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"

            output_text += "üîπ <i>/</i>"
    else:
        output_text += "<b>--- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"

    bot.send_text(event.from_chat, output_text, parse_mode='HTML')


def status_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É status.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
    payload: Dict[str, Any] = {}
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)
        if chat is None:
            send_not_found_chat(bot, event.from_chat, event.chat_type)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≥—Ä—É–ø–ø–∞, –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if chat.user is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            first_name = event.data['from']['firstName']
            last_name = event.data['from'].get('lastName') or None
            db.crud.update_user(session, chat.user, first_name, last_name)

            payload.update({
                'title': '–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                'email': chat.email,
                'name_label': '–ò–º—è',
                'name': chat.user.first_name,
                'surname_label': '–§–∞–º–∏–ª–∏—è',
                'surname': chat.user.last_name,
                'role': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if chat.user.administrator else None
            })
        elif chat.group is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            title = event.data['chat']['title']
            db.crud.update_group(session, chat.group, title)

            payload.update({
                'title': '–°—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã',
                'name_label': '–ù–∞–∑–≤–∞–Ω–∏–µ',
                'name': chat.group.title,
                'role': None
            })
        else:
            send_not_found_chat(bot, event.from_chat, event.chat_type)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        payload['subscriptions'] = [
            sub.notification_type_model.type
            for sub in chat.notification_subscribers
        ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    lines = [f"üìç <b>{payload['title']}</b>\n"]

    if 'email' in payload:
        lines.append(f"\nüîπ email: <i>{html.escape(payload['email'])}</i>")

    lines.append(f"\nüîπ {payload['name_label']}: <i>{html.escape(payload['name'])}</i>")

    if payload.get('surname_label'):
        surname = payload.get('surname') or ''
        lines.append(f"\nüîπ {payload['surname_label']}: <i>{html.escape(surname)}</i>")

    if payload.get('role'):
        lines.append(f"\nüîπ –†–æ–ª—å: <i>{html.escape(payload['role'])}</i>")

    lines.append("\nüîπ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ")
    if not payload['subscriptions']:
        lines.append("‚ùå")
    else:
        subs = ", ".join(payload['subscriptions'])
        lines.append(f"[{html.escape(subs)}]")

    output_text = ''.join(lines)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç—è–º (–Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –ª–∏–º–∏—Ç)
    for part in text_format.split_text(output_text, 4096):
        bot.send_text(event.from_chat, part, parse_mode='HTML')


def unprocessed_command(bot: Bot, event: Event):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –±–æ—Ç–µ.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    output_text = ("üçÉ <i>–®–µ–ª–µ—Å—Ç –ª–∏—Å—Ç—å–µ–≤</i> üçÉ\n\n"
                   "–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å\n\n"
                   f"{INFO_REQUEST_MESSAGE}")

    bot.send_text(event.from_chat, output_text, reply_msg_id=event.msgId, parse_mode="HTML")


def send_not_found_chat(bot: Bot, chat_id: str, chat_type: str):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —á–∞—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞.

    :param bot: VKTeams bot.
    :param chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param chat_type: –¢–∏–ø —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.
    """
    # –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
    if chat_type == ChatType.PRIVATE.value:
        not_found_chat_text = ("‚ö†Ô∏è <b>–í–∞—Å –Ω–µ—Ç –≤ –º–æ–∏—Ö —Å–ø–∏—Å–∫–∞—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>\n"
                               "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –º–æ–µ–π —Å–∏—Å—Ç–µ–º–µ.\n\n"
                               f"{INFO_REQUEST_MESSAGE}")
    else:
        not_found_chat_text = ("‚ö†Ô∏è <b>–≠—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ –º–æ–∏—Ö —Å–ø–∏—Å–∫–∞—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤</b>\n"
                               "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, —á–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–∏ —Å–ø–∏—Å–∫–∏.\n\n"
                               f"{INFO_REQUEST_MESSAGE}")

    bot.send_text(chat_id, not_found_chat_text, parse_mode='HTML')
