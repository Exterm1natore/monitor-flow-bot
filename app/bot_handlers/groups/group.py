import html
from bot.bot import Bot, Event
from bot.constant import ChatType
from app import db
from app.utils import date_and_time
from app.core import bot_extensions
from app.bot_handlers.helpers import (
    send_not_found_chat, catch_and_log_exceptions, administrator_access
)
from app.bot_handlers.constants import (
    Commands, INFO_REQUEST_MESSAGE, START_REQUEST_MESSAGE, HELP_BASE_MESSAGE
)


@catch_and_log_exceptions
def send_help_group(bot: Bot, event: Event, initial_text: str = ""):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    :param initial_text: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    if not initial_text:
        output_text = f"{HELP_BASE_MESSAGE}\n\n"
    else:
        output_text = f"{initial_text}\n\n"

    output_text += "<b>--- –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≥—Ä—É–ø–ø—ã:</b>\n\n"

    output_text += (
        f"üîπ /{Commands.START.value} - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
    )

    bot_extensions.send_long_text(
        bot, event.from_chat, output_text, parse_mode='HTML'
    )


@catch_and_log_exceptions
@administrator_access
def register_group(bot: Bot, event: Event):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    # –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
    if event.chat_type == ChatType.PRIVATE.value:
        raise TypeError("‚ùå Attempting to create a group that has a chat type of private.\n\n"
                        f"- from_chat: {str(event.from_chat)}")

    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        if chat is None:
            chat = db.crud.create_chat(session, event.from_chat, event.chat_type)

        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if chat.group is not None:
            output_text = "‚ö†Ô∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
        else:
            title: str = event.data['chat']['title']

            db.crud.create_group(session, chat, title)

            output_text = ("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞.\n\n"
                           f"{INFO_REQUEST_MESSAGE}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    bot_extensions.send_text_or_raise(
        bot, event.from_chat, output_text, parse_mode='HTML'
    )


@catch_and_log_exceptions
@administrator_access
def delete_group_registration(bot: Bot, event: Event):
    """
    –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        # –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
        if chat is not None and chat.chat_type_model.type == ChatType.PRIVATE.value:
            raise TypeError("‚ùå Attempting to remove a group whose chat type is private.\n\n"
                            f"- from_chat: {str(event.from_chat)}")

        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º
        group = db.crud.find_group_by_chat(session, chat)
        if group is not None:
            db.crud.delete_group(session, group, True)

        # –ï—Å–ª–∏ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º
        if db.crud.find_chat(session, event.from_chat) is not None:
            db.crud.delete_chat(session, chat)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    output_text = ("‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞.\n\n"
                   f"{START_REQUEST_MESSAGE}\n\n"
                   f"{INFO_REQUEST_MESSAGE}")
    bot_extensions.send_text_or_raise(
        bot, event.from_chat, output_text, parse_mode='HTML'
    )


@catch_and_log_exceptions
@administrator_access
def group_subscribe_notifications(bot: Bot, event: Event, notification_type_name: str):
    """
    –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≥—Ä—É–ø–ø–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    :param notification_type_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.
    """
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        if chat is None or chat.group is None:
            register_group(bot, event)
            chat = db.crud.find_chat(session, event.from_chat)

        notification_type = db.crud.find_notification_type(session, notification_type_name)

        if notification_type is None:
            output_text = f"‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        elif any(item.notification_type == notification_type.id for item in chat.notification_subscribers):
            output_text = f"‚úÖ –ì—Ä—É–ø–ø–∞ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{html.escape(notification_type_name)}'."
        else:
            db.crud.add_notification_subscriber(
                session, chat, notification_type, event.message_author['userId'], date_and_time.get_current_date_moscow()
            )
            output_text = f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ '{html.escape(notification_type.type)}'."

    bot_extensions.send_text_or_raise(
        bot, event.from_chat, output_text, reply_msg_id=event.msgId, parse_mode='HTML'
    )


@catch_and_log_exceptions
@administrator_access
def group_unsubscribe_notifications(bot: Bot, event: Event, notification_type_name: str):
    """
    –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –≥—Ä—É–ø–ø–µ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    :param notification_type_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.
    """
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        if chat is None:
            send_not_found_chat(bot, event.from_chat, event.chat_type)
            return

        notification_type = db.crud.find_notification_type(session, notification_type_name)

        if notification_type is None:
            output_text = f"‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        elif all(item.notification_type != notification_type.id for item in chat.notification_subscribers):
            output_text = f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{html.escape(notification_type_name)}'."
        else:
            db.crud.delete_notification_subscriber_by_data(session, chat, notification_type)
            output_text = f"‚úÖ –ì—Ä—É–ø–ø–∞ –æ—Ç–ø–∏—Å–∞–Ω–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–∏–ø–∞ '{html.escape(notification_type_name)}'."

    bot_extensions.send_text_or_raise(
        bot, event.from_chat, output_text, reply_msg_id=event.msgId, parse_mode='HTML'
    )
