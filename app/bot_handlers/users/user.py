from typing import Optional
import html
from bot.bot import Bot, Event
from bot.constant import ChatType
from app import db
from app.utils import date_and_time, text_format
from app.bot_handlers.helpers import (
    send_not_found_chat, catch_and_log_exceptions
)
from app.bot_handlers.constants import (
    Commands, INFO_REQUEST_MESSAGE, START_REQUEST_MESSAGE, HELP_BASE_MESSAGE
)


@catch_and_log_exceptions
def send_help_user(bot: Bot, event: Event, initial_text: str = ""):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    :param initial_text: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    if not initial_text:
        output_text = f"{HELP_BASE_MESSAGE}\n\n"
    else:
        output_text = f"{initial_text}\n\n"

    output_text += "<b>--- –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"

    output_text += (
        f"üîπ <i>/{Commands.STOP.value}</i> - –∑–∞–ø—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏;\n"
        "(<b>–í–∞–∂–Ω–æ:</b> –æ—Ç–ø—Ä–∞–≤–ª—è—è —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –≤–∞–º –Ω–∏—á–µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å. "
        f"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <i>/{Commands.START.value}</i>)."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç—è–º (–Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –ª–∏–º–∏—Ç)
    for part in text_format.split_text(output_text, 4096):
        bot.send_text(event.from_chat, part, parse_mode='HTML')


@catch_and_log_exceptions
def register_user(bot: Bot, event: Event):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
    if event.chat_type != ChatType.PRIVATE.value:
        raise TypeError("‚ùå Attempting to create a user whose chat type is not private.\n\n"
                        f"- from_chat: {str(event.from_chat)}")

    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        if chat is None:
            chat = db.crud.create_chat(session, event.from_chat, event.chat_type)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if chat.user is not None:
            output_text = "‚ö†Ô∏è <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.</b>"
        else:
            first_name: str = event.data['from']['firstName']
            last_name: Optional[str] = event.data['from']['lastName'] if event.data['from']['lastName'] else None

            user = db.crud.create_user(session, chat, first_name, last_name)

            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–µ–ª–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if db.crud.count_records(session, db.Administrator) == 0:
                db.crud.create_administrator(
                    session, user, event.message_author['userId'], date_and_time.get_current_date_moscow()
                )

            output_text = ("‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞.</b>\n\n"
                           f"{INFO_REQUEST_MESSAGE}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    bot.send_text(event.from_chat, output_text, parse_mode='HTML')


@catch_and_log_exceptions
def delete_user_registration(bot: Bot, event: Event):
    """
    –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
        if chat is not None and chat.chat_type_model.type != ChatType.PRIVATE.value:
            raise TypeError("‚ùå Attempting to remove a user whose chat type is not private.\n\n"
                            f"- from_chat: {str(event.from_chat)}")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º
        user = db.crud.find_user_by_chat(session, chat)
        if user is not None:
            db.crud.delete_user(session, user, True)

        # –ï—Å–ª–∏ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º
        if db.crud.find_chat(session, event.from_chat) is not None:
            db.crud.delete_chat(session, chat)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    output_text = ("‚úÖ <b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞.</b>\n\n"
                   f"{START_REQUEST_MESSAGE}\n\n"
                   f"{INFO_REQUEST_MESSAGE}")
    bot.send_text(event.from_chat, output_text, parse_mode='HTML')


@catch_and_log_exceptions
def user_subscribe_notifications(bot: Bot, event: Event, notification_type_name: str):
    """
    –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    :param notification_type_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.
    """
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        if chat is None or chat.user is None:
            register_user(bot, event)
            chat = db.crud.find_chat(session, event.from_chat)

        is_admin = db.crud.is_user_administrator(session, chat.user)
        notification_type = db.crud.find_notification_type(session, notification_type_name)

        if notification_type is None:
            output_text = f"‚ö†Ô∏è <b>–¢–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '<i>{html.escape(notification_type_name)}</i>' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>"
        elif any(item.notification_type == notification_type.id for item in chat.notification_subscribers):
            output_text = f"‚úÖ <b>–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '<i>{html.escape(notification_type_name)}</i>'.</b>"
        elif is_admin:
            db.crud.add_notification_subscriber(
                session, chat, notification_type, chat.email, date_and_time.get_current_date_moscow()
            )
            output_text = f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ '<i>{html.escape(notification_type.type)}</i>'</b>"
        else:
            raise ValueError("‚õî Unprocessed case")

    bot.send_text(event.from_chat, text=output_text, parse_mode='HTML')


@catch_and_log_exceptions
def user_unsubscribe_notifications(bot: Bot, event: Event, notification_type_name: str):
    """
    –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    :param notification_type_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.
    """
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        if chat is None:
            send_not_found_chat(bot, event.from_chat, event.chat_type)
            return

        notification_type = db.crud.find_notification_type(session, notification_type_name)

        if notification_type is None:
            output_text = f"‚ö†Ô∏è <b>–¢–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '<i>{html.escape(notification_type_name)}</i>' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>"
        elif all(item.notification_type != notification_type.id for item in chat.notification_subscribers):
            output_text = f"‚úÖ <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '<i>{html.escape(notification_type_name)}</i>'.</b>"
        else:
            db.crud.delete_notification_subscriber_by_data(session, chat, notification_type)
            output_text = f"‚úÖ <b>–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–∏–ø–∞ '<i>{html.escape(notification_type_name)}</i>'.</b>"

    bot.send_text(event.from_chat, text=output_text, parse_mode='HTML')
