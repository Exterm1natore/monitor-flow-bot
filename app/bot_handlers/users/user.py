from typing import Optional
import logging
import html
from bot.bot import Bot, Event
from bot.constant import ChatType
from app import db
from app.utils import date_and_time, db_records_format
from app.core import bot_extensions
from app.bot_handlers.helpers import (
    send_not_found_chat, catch_and_log_exceptions
)
from app.bot_handlers.constants import (
    Commands, INFO_REQUEST_MESSAGE, START_REQUEST_MESSAGE, HELP_BASE_MESSAGE
)
from app.bot_handlers import notifications


@catch_and_log_exceptions
def send_help_user(bot: Bot, event: Event, initial_text: str = ""):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    :param initial_text: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    if not initial_text:
        output_text = f"{HELP_BASE_MESSAGE}\n\n"
    else:
        output_text = f"{initial_text}\n\n"

    output_text += "<b>--- –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"

    output_text += (
        f"üîπ /{Commands.START.value} - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ;\n"
        f"üîπ /{Commands.STOP.value} - –∑–∞–ø—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏;\n"
        "(<b>–í–∞–∂–Ω–æ:</b> –æ—Ç–ø—Ä–∞–≤–ª—è—è —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –≤–∞–º –Ω–∏—á–µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å."
        f"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <i>/{Commands.START.value}</i>)."
    )

    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)
        is_admin: bool = chat.user.administrator is not None if chat is not None else False

    if is_admin:
        output_text += "\n\n<b>--- –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"

        output_text += (f"üîπ /{Commands.GET_DATA.value} - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;\n"
                        f"üîπ /{Commands.FIND_DATA.value} - –ø–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é;\n"
                        f"üîπ /{Commands.ADD_NOTIFY_SUBSCRIBER.value} - –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –±–æ—Ç–æ–º) "
                        f"–¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞;\n"
                        f"üîπ /{Commands.DEL_NOTIFY_SUBSCRIBER.value} - –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –±–æ—Ç–æ–º) "
                        f"–¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞;\n"
                        f"üîπ /{Commands.ADD_ADMIN.value} - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞;\n"
                        f"üîπ /{Commands.DEL_ADMIN.value} - –æ—Ç–∑—ã–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞;\n"
                        f"üîπ /{Commands.DEL_CHAT.value} - —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n")

    bot_extensions.send_long_text(
        bot, event.from_chat, output_text, parse_mode='HTML'
    )


@catch_and_log_exceptions
def register_user(bot: Bot, event: Event):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
    if event.chat_type != ChatType.PRIVATE.value:
        raise TypeError("‚ùå Attempting to create a user whose chat type is not private.\n\n"
                        f"- from_chat: {str(event.from_chat)}")

    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        if chat is None:
            chat = db.crud.create_chat(session, event.from_chat, event.chat_type)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        is_register = False
        if chat.user is not None:
            output_text = "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
        else:
            first_name: str = event.data['from']['firstName']
            last_name: Optional[str] = event.data['from']['lastName'] if event.data['from']['lastName'] else None

            user = db.crud.create_user(session, chat, first_name, last_name)

            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–µ–ª–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if db.crud.count_records(session, db.Administrator) == 0:
                db.crud.create_administrator(
                    session, user, event.message_author['userId'], date_and_time.get_current_date_moscow()
                )
            output_text = ("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞.\n\n"
                           f"{INFO_REQUEST_MESSAGE}")

            is_register = True
            _, model_fields, _ = db_records_format.find_config_model_format(db.get_tablename_by_model(db.User))
            record_format = db_records_format.format_for_chat(user, model_fields=model_fields)
            admin_request_text = f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n\n–î–∞–Ω–Ω—ã–µ:\n{record_format}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    bot_extensions.send_text_or_raise(
        bot, event.from_chat, output_text, parse_mode='HTML'
    )

    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_register:
        try:
            notifications.send_notification_to_administrators(bot, admin_request_text)
        except Exception as e:
            logging.getLogger(__name__).exception(e)


@catch_and_log_exceptions
def delete_user_registration(bot: Bot, event: Event):
    """
    –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    """
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞
        if chat and chat.chat_type_model.type != ChatType.PRIVATE.value:
            raise TypeError("‚ùå Attempting to remove a user whose chat type is not private.\n\n"
                            f"- from_chat: {str(event.from_chat)}")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º
        user = chat.user if chat else None
        if user is not None:
            db.crud.delete_user(session, user, True)

        # –ï—Å–ª–∏ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º
        if db.crud.find_chat(session, event.from_chat) is not None:
            db.crud.delete_chat(session, chat)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    output_text = ("‚úÖ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞.\n\n"
                   f"{START_REQUEST_MESSAGE}\n\n"
                   f"{INFO_REQUEST_MESSAGE}")

    bot_extensions.send_text_or_raise(
        bot, event.from_chat, output_text, parse_mode='HTML'
    )


@catch_and_log_exceptions
def user_subscribe_notifications(bot: Bot, event: Event, notification_type_name: str):
    """
    –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    :param notification_type_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.
    """
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        if chat is None or chat.user is None:
            register_user(bot, event)
            chat = db.crud.find_chat(session, event.from_chat)

        is_admin = chat.user.administrator is not None
        notification_type = db.crud.find_notification_type(session, notification_type_name)

        is_subscribe = False
        if notification_type is None:
            output_text = f"‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        elif any(item.notification_type == notification_type.id for item in chat.notification_subscribers):
            output_text = f"‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{html.escape(notification_type_name)}'."
        elif is_admin:
            db.crud.add_notification_subscriber(
                session, chat, notification_type, chat.email, date_and_time.get_current_date_moscow()
            )
            output_text = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ '{html.escape(notification_type.type)}'."

            is_subscribe = True
            admin_request_text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email = '{event.from_chat}' –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ "
                                  f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ '{notification_type.type}'.")
        else:
            is_subscribe = True
            _, model_fields, _ = db_records_format.find_config_model_format(db.get_tablename_by_model(db.User))
            record_format = db_records_format.format_for_chat(chat.user, model_fields=model_fields)
            admin_request_text = (f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ '{notification_type.type}'.\n\n"
                                  f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                                  f"{record_format}\n\n"
                                  f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Ä—É—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                                  f"–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /{Commands.ADD_NOTIFY_SUBSCRIBER.value} ")

            output_text = (f"‚ùáÔ∏è –ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ '{html.escape(notification_type.type)}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n"
                           f"–û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –µ–≥–æ –æ–¥–æ–±—Ä—è—Ç. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.")

    bot_extensions.send_text_or_raise(
        bot, event.from_chat, output_text, reply_msg_id=event.msgId, parse_mode='HTML'
    )

    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_subscribe:
        try:
            notifications.send_notification_to_administrators(bot, admin_request_text)
        except Exception as e:
            logging.getLogger(__name__).exception(e)


@catch_and_log_exceptions
def user_unsubscribe_notifications(bot: Bot, event: Event, notification_type_name: str):
    """
    –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

    :param bot: VKTeams bot.
    :param event: –°–æ–±—ã—Ç–∏–µ.
    :param notification_type_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.
    """
    with db.get_db_session() as session:
        chat = db.crud.find_chat(session, event.from_chat)

        if chat is None:
            send_not_found_chat(bot, event.from_chat, event.chat_type)
            return

        notification_type = db.crud.find_notification_type(session, notification_type_name)

        is_unsubscribe = False
        if notification_type is None:
            output_text = f"‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        elif all(item.notification_type != notification_type.id for item in chat.notification_subscribers):
            output_text = f"‚úÖ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{html.escape(notification_type_name)}'."
        else:
            admin_request_text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email = '{event.from_chat}' –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç "
                                  f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–∏–ø–∞ '{notification_type.type}'.")
            is_unsubscribe = db.crud.delete_notification_subscriber_by_data(session, chat, notification_type)
            output_text = f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–∏–ø–∞ '{html.escape(notification_type_name)}'."

    bot_extensions.send_text_or_raise(
        bot, event.from_chat, output_text, reply_msg_id=event.msgId, parse_mode='HTML'
    )

    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_unsubscribe:
        try:
            notifications.send_notification_to_administrators(bot, admin_request_text)
        except Exception as e:
            logging.getLogger(__name__).exception(e)
